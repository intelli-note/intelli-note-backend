name: Deploy

on:
  pull_request:
    branches:
      - main
    types:
      - closed
  workflow_dispatch:

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    
    name: Deploy Project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Branch
        uses: actions/checkout@v4.1.4
        
      - name: Setup JDK 17
        uses: actions/setup-java@v4.2.1
        with: 
          distribution: 'oracle'
          java-version: '17'
          cache: 'maven'
        
      - name: Package Project
        run: mvn -B clean package

      - name: Upload JAR Package And Run
        env:
          PROJECT_NAME: intelli-note
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
          MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          ES_URL: ${{ secrets.ES_URL }}
          MQ_HOST: ${{ secrets.MQ_HOST }}
          OSS_ACCESS_KEY: ${{ secrets.OSS_ACCESS_KEY }}
          OSS_SECRET_KEY: ${{ secrets.OSS_SECRET_KEY }}
          OSS_BUCKET: ${{ secrets.OSS_BUCKET }}
          OSS_REGION: cn-east-2
          OSS_DOMAIN: ${{ secrets.OSS_DOMAIN }}
          MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
          MINIO_BUCKET: ${{ secrets.MINIO_BUCKET }}
          MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
          ALIYUN_ACCESS_KEY: ${{ secrets.ALIYUN_ACCESS_KEY }}
          ALIYUN_SECRET_KEY: ${{ secrets.ALIYUN_SECRET_KEY }}
          ALIYUN_NLS_APP_KEY: ${{ secrets.ALIYUN_NLS_APP_KEY }}
          MINI_PROGRAM_APP_ID: ${{ secrets.MINI_PROGRAM_APP_ID }}
          MINI_PROGRAM_APP_SECRET: ${{ secrets.MINI_PROGRAM_APP_SECRET }}
        uses: cross-the-world/ssh-scp-ssh-pipelines@v1.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          user: ${{ secrets.SSH_USER }}
          pass: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          first_ssh: |
            cd ~
            if [ ! -d "./${{ env.PROJECT_NAME }}" ]; then mkdir ./${{ env.PROJECT_NAME }} && echo -e '\033[1;32mCreate '${{ env.PROJECT_NAME }}' Directory\033[0m'; fi;
            cd ~/${{ env.PROJECT_NAME }}
          scp: |
            ./target/${{ env.PROJECT_NAME }}.jar => ~/${{ env.PROJECT_NAME }}/
          last_ssh: |
            cd ~/${{ env.PROJECT_NAME }}
            PID=$(ps -ef | grep ${{ env.PROJECT_NAME }}.jar | grep -v grep | head -n 1 | awk '{printf $2}'); if [ -n "$PID" ];then kill -9 $PID && echo -e '\033[1;31mThe original Spring Boot Application Process has terminated its execution!\033[0m'; else echo -e '\033[1;33mNo Spring Boot Application Process found!\033[0m'; fi;
            nohup java -jar ${{ env.PROJECT_NAME }}.jar --spring.profiles.active=prd --spring.datasource.username=$MYSQL_USERNAME --spring.datasource.password=$MYSQL_PASSWORD --spring.elasticsearch.uris=$ES_URL --spring.elasticsearch.username=$USERNAME --spring.elasticsearch.password=$PASSWORD --spring.rabbitmq.host=$MQ_HOST --spring.rabbitmq.username=$USERNAME --spring.rabbitmq.password=$PASSWORD --oss.access-key=$OSS_ACCESS_KEY --oss.secret-key=$OSS_SECRET_KEY --oss.bucket=$OSS_BUCKET --oss.region=$OSS_REGION --oss.domain=$OSS_DOMAIN --minio.access-key=$MINIO_ACCESS_KEY --minio.secret-key=$MINIO_SECRET_KEY --minio.endpoint=$MINIO_ENDPOINT --minio.bucket=$MINIO_BUCKET --aliyun.access-key=$ALIYUN_ACCESS_KEY --aliyun.secret-key=$ALIYUN_SECRET_KEY --aliyun.nls.app-key=$ALIYUN_NLS_APP_KEY --mini-program.app-id=$MINI_PROGRAM_APP_ID --mini-program.app-secret=$MINI_PROGRAM_APP_SECRET > ${{ env.PROJECT_NAME }}.log 2>&1 &
            
